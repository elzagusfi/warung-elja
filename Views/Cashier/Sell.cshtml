@model WarungElja.Models.CashierViewModel

@{
    ViewData["Title"] = "Sell Product";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Sell Product</h1>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Product: @Model.ProductName</h5>
            </div>
            <div class="card-body">
                <form asp-action="Sell">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="IdProductDetails" />
                    <input type="hidden" asp-for="Price" />
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Current Stock</label>
                            <input asp-for="CurrentStock" class="form-control" readonly />
                        </div>
                        <div class="col-md-6">
                            <label asp-for="Price" class="form-label">Price per Unit</label>
                            <div class="input-group">
                                <span class="input-group-text">Rp</span>
                                <input id="Price" value="@Model.Price.ToString("N2", new System.Globalization.CultureInfo("id-ID"))" class="form-control" readonly />
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label asp-for="SellQuantity" class="form-label"></label>
                        <input asp-for="SellQuantity" class="form-control" value="0" min="0" />
                        <span asp-validation-for="SellQuantity" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group mb-4">
                        <label class="form-label">Total Amount</label>
                        <div class="input-group">
                            <span class="input-group-text">Rp</span>
                            <input id="totalAmount" class="form-control" readonly />
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="btn btn-success w-100">
                            <i class="bi bi-cash"></i> Process Sale
                        </button>
                        <a asp-action="Index" class="btn btn-secondary w-100 mt-2">
                            <i class="bi bi-arrow-left"></i> Back to Products
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Sale Summary</h5>
            </div>
            <div class="card-body">
                <div class="text-center mb-4">
                    <div class="icon-circle bg-success text-white mx-auto mb-3">
                        <i class="bi bi-receipt" style="font-size: 2rem;"></i>
                    </div>
                    <h4>Sale Details</h4>
                </div>
                
                <div class="border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Product:</span>
                        <strong>@Model.ProductName</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Price per unit:</span>
                        <strong>Rp @Model.Price.ToString("N2", new System.Globalization.CultureInfo("id-ID"))</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Available stock:</span>
                        <strong>@Model.CurrentStock</strong>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between">
                        <span>Quantity:</span>
                        <strong id="summaryQuantity">0</strong>
                    </div>
                    <div class="d-flex justify-content-between fw-bold">
                        <span>Total:</span>
                        <strong id="summaryTotal">Rp 0,00</strong>
                    </div>
                </div>
                
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> After processing the sale, the stock will be automatically updated.
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Floating Sales Information Button -->
<div class="floating-sales-info">
    <button class="btn btn-success btn-lg rounded-circle shadow" type="button" data-bs-toggle="offcanvas" data-bs-target="#salesInfoOffcanvas" aria-controls="salesInfoOffcanvas">
        <i class="bi bi-info-circle"></i>
    </button>
</div>

<!-- Sales Information Offcanvas -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="salesInfoOffcanvas" aria-labelledby="salesInfoOffcanvasLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="salesInfoOffcanvasLabel">Sales Information</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="text-center mb-4">
            <div class="icon-circle bg-success text-white mx-auto mb-3">
                <i class="bi bi-cash-stack" style="font-size: 2rem;"></i>
            </div>
            <h4>Sales Terminal</h4>
            <p class="text-muted">Select a product to process a sale</p>
        </div>
        
        <div class="border rounded p-3 mb-3">
            <h6><i class="bi bi-info-circle"></i> How to use</h6>
            <ol class="small">
                <li>Select a product from the list</li>
                <li>Enter the quantity to sell</li>
                <li>Confirm the sale</li>
                <li>Stock will be automatically updated</li>
            </ol>
        </div>
        
        <div class="border rounded p-3">
            <h6><i class="bi bi-lightning"></i> Quick Tips</h6>
            <ul class="small">
                <li>Products with low stock are highlighted</li>
                <li>Deactivated products are not shown</li>
                <li>Sales are recorded automatically</li>
            </ul>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityInput = document.getElementById('SellQuantity');
            const priceInput = document.getElementById('Price');
            const totalInput = document.getElementById('totalAmount');
            const summaryQuantity = document.getElementById('summaryQuantity');
            const summaryTotal = document.getElementById('summaryTotal');

            // Extract numeric value from formatted price
            function parsePrice(priceText) {
                // Remove 'Rp' and spaces, then replace decimal separator
                const cleanText = priceText.replace(/[^\d,]/g, '').replace(',', '.');
                return parseFloat(cleanText) || 0;
            }

            // Get the price as a number
            const priceValue = parsePrice(priceInput.value);

            // Initialize with default values
            quantityInput.value = '0';
            totalInput.value = '0,00';
            summaryQuantity.textContent = '0';
            summaryTotal.textContent = 'Rp 0,00';

            function calculateTotal() {
                const quantity = parseInt(quantityInput.value) || 0;
                const total = quantity * priceValue;
                
                // Format as Rupiah with thousands separator using Indonesian format
                const formattedTotal = total.toLocaleString('id-ID', { 
                    minimumFractionDigits: 2, 
                    maximumFractionDigits: 2 
                });
                
                totalInput.value = formattedTotal;
                summaryQuantity.textContent = quantity.toString();
                summaryTotal.textContent = 'Rp ' + formattedTotal;
            }

            // Handle input changes
            quantityInput.addEventListener('input', function (e) {
                // Allow only numbers
                let value = e.target.value.replace(/[^\d]/g, '');
                // Prevent leading zeros (except for the single zero)
                if (value.length > 1 && value[0] === '0') {
                    value = value.replace(/^0+/, '');
                }
                // If empty, set to 0
                if (value === '') {
                    value = '0';
                }
                e.target.value = value;
                calculateTotal();
            });

            // Handle blur to ensure value is never empty
            quantityInput.addEventListener('blur', function (e) {
                if (e.target.value === '') {
                    e.target.value = '0';
                    calculateTotal();
                }
            });
        });
    </script>
    
    <style>
        .floating-sales-info {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 1050;
        }
        
        .floating-sales-info .btn {
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: all 0.3s;
        }
        
        .floating-sales-info .btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);
        }
        
        }